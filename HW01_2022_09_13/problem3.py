# -*- coding: utf-8 -*-"""Created on Sun Sep 18 15:14:00 2022@author: surajgiriProblem 3""""""input ===========nominal yearly interest rate ramt of loan Pnumber of compounding periods per year mterm of mortgage in years nmortgage is fully redeemed at the end of the periodto calculate==========monthly payment -> Ceffective annual interest rate -> r_effdisplay a detailed payment schedule:    for each month the interest and principal parts of the payment, and     the remaining principal.P =500000, r=0.02, m=12, and n=20"""import numpy as npimport pandas as pd# effective annual interest ratedef effective_interest_rate(r):        r_eff = (1+(r/m)) ** m - 1    return r_eff# amortization scheduledef Amortization(P, r, m, n):    payment_sched = pd.DataFrame(index = range(m*n+1))    interest_paid = np.zeros(m*n+1)    principal_paid = np.zeros(m*n+1)    remaining_P = np.zeros(m*n+1)        # mortgage paid    C = P * (r / m) * (1 - (1 + (r/m)) **  (-n * m)) ** (-1)    R  = ((1 + (r / m)) ** (-1)) ** np.arange(1, n*m+1, 1)        for i in range((m*n)):        remaining_P[i] = C * np.sum(R[0:n * m - i])        # remaining_P[i] = C * (1- (1 + (r/m)) ** (-m * n + i)) / (r / m)        interest_paid[i] = remaining_P[i-1] * r/m        principal_paid[i] = C - interest_paid[i]            payment_sched["Interest Paid"] = interest_paid    payment_sched["Pricipal Paid"] = principal_paid    payment_sched["Remaining Principal"] = remaining_P        return payment_sched    if __name__ == "__main__":    P = 500000     r=0.02     m=12    n=20    print("Efective Annual Interest Rate: ", effective_interest_rate(r))    print("Amortization Scheme: \n", Amortization(P, r, m, n))